struc sbaData                           _resv_
{
  .                                     =                                       myCount
  .offs                                 =                                       myOffset
  sbaData                               _resv_
}
macro sbaData                           _resv_
{
  ;( data )
  ;{
  ;:  if #resv is less than #size, then set #resv to #size
  ;:  allocate page-aligned #resv bytes as read- and writeable and load @data there
  ;:  0x00  word                        <data>                                  <data>
  ;:  0x02  word                        size                                    size
  ;:  0x04  word                        resv                                    resv
  ;:  0x06  magic                       'db'                                    unused
  ;:  0x08  *byte[size]                 @data                                   *data
  ;}
  local                                 _content_                               ;content of yapter
  local                                 _load_                                  ;length  of yapter in file   for yapter-table
  local                                 _size_                                  ;length  of yapter in memory for yapter-table
  local                                 _base_                                  ;offset  of yapter in memory
  local                                 _file_                                  ;offset  of yapter in file   for yapter-table
  local                                 myLoad                                  ;length  of yapter in file
  local                                 mySize                                  ;length  of yapter in memory
  if ( _head_ eq '<none>' )
    display                             '[asm:sba] an error occured while processing yapter <data>: headless file!'
    err
  end if
  store word                            sbaYapter_tData                         at vYapters:( oYapters + 0x00 )
  store word                            _load_                                  at vYapters:( oYapters + 0x02 )         ;length in file
  store word                            _size_                                  at vYapters:( oYapters + 0x04 )         ;length in memory, aligned
  store word                            'db'                                    at vYapters:( oYapters + 0x06 )         ;magic
  store qword                           _file_                                  at vYapters:( oYapters + 0x08 )         ;offset in file
  display                               '[asm:sba] <data>         (2016-02-09) %'
  displayHex2                           ( myCount + 0 )
  display                               ' '
  displayHex2                           sbaYapter_tData
  display                               ' '
  displayHex2                           _load_
  display                               ' '
  displayHex2                           _size_
  display                               ' »db« *0x'
  displayHex                            _file_
  display                               ' -> *0x'
  displayHex                            myOffset
  display                               ' #0x'
  displayHex2                           _size_
  display                               ' ( #0x'
  displayHex2                           _load_
  display                               ' )', 10
  oYapters                              =                                       ( oYapters + 0x10 )
  myOffset                              =                                       ( myOffset + _size_ )
  myCount                               =                                       ( myCount + 1 )
  sizeBody                              =                                       ( sizeBody + _load_ )
  postpone
  \{
    display 'data base: *0x:'
    displayHex _base_
    display 10
    myFile                              =                                       $
    org                                 myBase
    _content_                           sbaYapter_tData, _base_, _size_, _file_, _load_
    myLoad                              =                                       ( $ - myBase )
    mySize                              =                                       ( myLoad )
    match a,_resv_
    \\{
      if ( a > mySize )
        mySize                          =                                       ( a )
      end if
    \\}
    if ( mySize and 0x0000000000000fff )
      mySize                            =                                       (( mySize + 4096 ) and 0xfffffffffffff000 )
    end if
    if ( mySize and 0xffffffff00000000 )
      display                           '[asm:sba] an error occured while processing yapter <data>: _size_ too large!'
      err
    end if
    _base_                              =                                       myBase
    _file_                              =                                       myFile
    _load_                              =                                       myLoad
    _size_                              =                                       mySize
    myBase                              =                                       ( myBase + mySize )
    myFile                              =                                       ( myFile + myLoad )
    org                                 myFile
  \}
  macro _content_ yType, yBase, yResv, yFile, ySize
}
struc sbaConst
{
  .                                     =                                       myCount
  .offs                                 =                                       myOffset
  sbaConst
}
macro sbaConst
{
  ;( resv )
  ;{
  ;:  allocate page-aligned #size bytes as readable and load @data there
  ;:  0x00  word                        <resv>                                  <resv>
  ;:  0x02  word                        size                                    size
  ;:  0x04  word                        ignored                                 resv
  ;:  0x06  magic                       'cb'                                    unused
  ;:  0x08  *byte[size]                 @data                                   *data
  ;}
  local                                 _content_                               ;content of yapter
  local                                 _load_                                  ;length  of yapter in file   for yapter-table
  local                                 _size_                                  ;length  of yapter in memory for yapter-table
  local                                 _base_                                  ;offset  of yapter in memory
  local                                 _file_                                  ;offset  of yapter in file   for yapter-table
  local                                 myLoad                                  ;length  of yapter in file
  local                                 mySize                                  ;length  of yapter in memory
  if ( _head_ eq '<none>' )
    display                             '[asm:sba] an error occured while processing yapter <const>: headless file!'
    err
  end if
  store word                            sbaYapter_tConst                        at vYapters:( oYapters + 0x00 )
  store word                            _load_                                  at vYapters:( oYapters + 0x02 )         ;length in file
  store word                            _size_                                  at vYapters:( oYapters + 0x04 )         ;length in memory, aligned
  store word                            'cb'                                    at vYapters:( oYapters + 0x06 )         ;magic
  store qword                           _file_                                  at vYapters:( oYapters + 0x08 )         ;offset in file
  display                               '[asm:sba] <const>        (2016-02-09) %'
  displayHex2                           ( myCount + 0 )
  display                               ' '
  displayHex2                           sbaYapter_tConst
  display                               ' '
  displayHex2                           _load_
  display                               ' '
  displayHex2                           _size_
  display                               ' »cb« *0x'
  displayHex                            _file_
  display                               ' -> *0x'
  displayHex                            myOffset
  display                               ' #0x'
  displayHex2                           _size_
  display                               ' ( #0x'
  displayHex2                           _load_
  display                               ' )', 10
  oYapters                              =                                       ( oYapters + 0x10 )
  myOffset                              =                                       ( myOffset + _size_ )
  myCount                               =                                       ( myCount + 1 )
  sizeBody                              =                                       ( sizeBody + _load_ )
  postpone
  \{
    myFile                              =                                       $
    org                                 myBase
    _content_                           sbaYapter_tConst, _base_, _size_, _file_, _load_
    myLoad                              =                                       ( $ - myBase )
    mySize                              =                                       ( myLoad )
    if ( mySize and 0x0000000000000fff )
      mySize                            =                                       (( mySize + 4096 ) and 0xfffffffffffff000 )
    end if
    if ( mySize and 0xffffffff00000000 )
      display                           '[asm:sba] an error occured while processing yapter <const>: _size_ too large!'
      err
    end if
    _base_                              =                                       myBase
    _file_                              =                                       myFile
    _load_                              =                                       myLoad
    _size_                              =                                       mySize
    myBase                              =                                       ( myBase + mySize )
    myFile                              =                                       ( myFile + myLoad )
    org                                 myFile
  \}
  macro _content_ yType, yBase, yResv, yFile, ySize
}
