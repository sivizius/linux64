macro newList                           list
{
  macro list                            arg
  \{
    if      ( arg < 0 )
      display '[asm:lists] negative index!', 10
      err
    else if ( arg > list#@@ctr )
      display '[asm:lists] index out of bounds!', 10
      err
    end if
  \}
  list#@@ctr                            =                                       ( 0 - 1 )
}
macro addList                           list,                                   item
{
  match , item
  \{
    display '[asm:list] nothing to add!', 10
    err
  \}
  local y
  list#@@ctr                            =                                       ( list#@@ctr + 1 )
  y                                     =                                       ( list#@@ctr )
;  displayValue 'add: 0x', y
  macro list                            arg
  \{
    list arg
    if ( defined y )
      if ( arg = y )
;        displayValue 'item: 0x', arg
        item
      end if
    end if
  \}
}
struc ctrList                           list
{
  .                                     =                                       ( list#@@ctr + 1 )
}
macro rndList                           list
{
  local modulo, k, size
  local lfsrseed, random
  modulo                                ctrList                                 list
  k                                     =                                       ( modulo )
  size                                  =                                       2
  lfsrseed                              =                                       null
  random0                               __random__
  random1                               __random__
  random2                               __random__
  random3                               __random__
  while ( k )
    k                                   =                                       ( k shr 1 )
    size                                =                                       ( size + 1 )
  end while
  while ( lfsrseed = 0 )
    lfsrseed                            __random__
    lfsrseed                            __modulo__                              lfsrseed,                               (( 1 shl size ) - 1 )
  end while
  match +,-
  \{
    displayValue 'modulo    = 0x', modulo
    displayValue 'size      = 0x', size
    displayValue 'max:        0x', ( 1 shl size )
    displayValue 'lfsrseed  = 0x', lfsrseed
    displayValue 'random0   = 0x', random0
    displayValue 'random1   = 0x', random1
    displayValue 'random2   = 0x', random2
  \}
  repeat (( 1 shl size ) - 1 )
    lfsrseed                            __GLFSR__                               lfsrseed,                               ( size )
    lfsrseed                            __GLFSR__                               lfsrseed,                               ( size )
    if ( lfsrseed <= modulo )
      k                                 =                                       ((( lfsrseed * 2719 ) + random0 ))
      k                                 __modulo__                              k,                                      modulo
      k                                 =                                       ((( lfsrseed * 2729 ) + random1 ))
      k                                 __modulo__                              k,                                      modulo
      k                                 =                                       ((( lfsrseed * 2731 ) + random2 ))
      k                                 __modulo__                              k,                                      modulo
      k                                 =                                       ((( lfsrseed * 2711 ) + random3 ))
      k                                 __modulo__                              k,                                      modulo
;      k                                 =                                       lfsrseed
      ;displayValue '#0x', k
      list                              k
    end if
  end repeat
}
macro newQueque                         queque
{
  macro queque
  \{
    if      ( queque\#@@ptr < ( 0 - 1 ))
      display '[asm:queque] negative index of »', `queque, '«!', 10
      err
    else if ( queque\#@@ptr >= queque\#@@ctr )
      display '[asm:queque] index of »', `queque, '« out of bounds!', 10
      displayValue 'pointer: 0x', queque\#@@ptr
      displayValue 'counter: 0x', queque\#@@ctr
      err
    else
    end if
    queque\#@@ptr                        =                                       ( queque\#@@ptr + 1 )
  \}
  queque#@@ptr                          =                                       ( 0 - 1 )
  queque#@@ctr                          =                                       ( 0 - 1 )
}
macro addQueque                         queque,                                 item
{
  match , item
  \{
    display '[asm:queque] nothing to add!', 10
    err
  \}
  local y
  queque#@@ctr                          =                                       ( queque#@@ctr + 1 )
  y                                     =                                       ( queque#@@ctr )
  macro queque
  \{
    queque
    if ( defined y )
      if ( y = queque#@@ptr )
        item
      end if
    end if
  \}
}
struc ctrQueque                         queque
{
  .                                     =                                       ( queque#@@ctr + 1 )
}
struc ptrQueque                         queque
{
  .                                     =                                       ( queque#@@ptr )
}
