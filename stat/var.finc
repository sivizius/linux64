macro var@@dlist {}
macro var@@flist {}
macro var@@rlist {}
macro var@@type                         type,     ddef,     rdef,     size,     vartype
{
  var@@#type#_type                      =                                       vartype
  ;var@@d_#type#_ptr                     =                                       ( var@@d_#type#s )
  newList                               var@@d_#type#_value
  var@@d_#type#_count                   =                                       ( null )
  var@@r_#type#_ptr                     =                                       ( var@@r_#type#s )
  var@@r_#type#_count                   =                                       ( null )
  match any0, ddef
  \{
    macro var@@dlist
    \\{
      var@@dlist
      if ( var@@d_#type#_value@@ctr + 1 )
        k                               =                                       ((( $ + size - 1 ) and ( 0 - size )) - $ )
        while ( k )
          tmp                           __random__
          if      ( k >= __qword__ )
            k                           =                                       ( k - __qword__ )
            dq                          tmp
          else if ( k >= __dword__ )
            k                           =                                       ( k - __dword__ )
            dd                          ( tmp and 0xffffffff )
          else if ( k >= __word__ )
            k                           =                                       ( k - __word__ )
            dw                          ( tmp and 0xffff )
          else if ( k >= __byte__ )
            k                           =                                       ( k - __byte__ )
            db                          ( tmp and 0xff )
          end if
        end while
        var@@d_#type#s:
          rndList                       var@@d_#type#_value
      else
        var@@d_#type#s:
      end if
      var@@d_#type#_count@final         =                                       ( var@@d_#type#_count )
    \\}
  \}
  match any0, rdef
  \{
    macro var@@rlist
    \\{
      var@@rlist
      if ( var@@r_#type#_count )
        rb                              ((( $ + size - 1 ) and ( 0 - size )) - $ )
        var@@r_#type#s:
          rdef                          var@@r_#type#_count
      else
        var@@r_#type#s:
      end if
      var@@r_#type#_count@final         =                                       ( var@@r_#type#_count )
    \\}
  \}
  macro type [ operant ]
  \{
    \common
      \local done, buffer
    \forward
      done                              equ
      match var==val, operant
      \\{
        if ( defined var\\#@@type )
          display '[asm:op:', `type, '] variable »', \\`var, '« already defined!', 10
          err
        else
          ;display 'add »', \\`var, '«', 10
        end if
        done                            equ                                     true
        addList                         var@@d_#type#_value,                    < buffer ddef val >
        var\\#@@type                    equ                                     var@@#type#_type
        var\\#@@size                    =                                       size
        var\\#@@value                   =                                       buffer
        var@@d_#type#_count             =                                       ( var@@d_#type#_count + 1 )
      \\}
      match , done
      \\{
        if ( defined operant\\#@@type )
          display '[asm:op:', `type, '] variable »', \\`operant, '« already defined!', 10
          err
        else
          display 'add »', \\`operant, '«', 10
        end if
        operant\#@@type                 equ                                     var@@#type#_type
        operant\#@@size                 =                                       size
        operant\#@@value                =                                       var@@r_#type#_ptr
        var@@r_#type#_ptr               =                                       ( var@@r_#type#_ptr + size )
        var@@r_#type#_count             =                                       ( var@@r_#type#_count + 1 )
      \\}
  \}
}
done                                    equ
match =amd64, __machine__
{
  var@@type                             pointer,  dq,       rq,       __qword__,          op@@tPointer
  done                                  equ                                     true
}
match =x86protected, __machine__
{
  var@@type                             pointer,  dd,       rd,       __dword__,          op@@tPointer
  done                                  equ                                     true
}
match =x86real, __machine__
{
  var@@type                             pointer,  dw,       rw,       __word__,           op@@tPointer
  done                                  equ                                     true
}
match , done
{
  display '[asm:op] unknown pointer-size!', 10
  err
}
macro do@@init
{
  local loooop
  if ( defined do@@init )
    do@@init
  end if
  if ( var@@d_pointer_count@final = null )
  else
    lea                                 rax,                                    [ __init__ ]
    lea                                 rsi,                                    [ var@@d_pointers ]
    mov                                 rdx,                                    var@@d_pointer_count@final
    loooop:
    ;{
      add                               qword [ rsi + __qword__ * ( rdx - 1 )], rax
      dec                               rdx
      jnz                               loooop
    ;}
  end if
}

var@@type                               qword,    dq,       rq,       __qword__,          op@@tVariable
var@@type                               dword,    dd,       rd,       __dword__,          op@@tVariable
var@@type                               word,     dw,       rw,       __word__,           op@@tVariable
var@@type                               byte,     db,       rb,       __byte__,           op@@tVariable

macro var@@dlist
{
  op@@stroff:
    rndList                             op@@strlst
;  var@@d_strings:
;    rndList                             var@@d_string_value
  var@@dlist
}
macro string operant, [ rest ]
{
  local done, size, buffer
  done                                  equ
  match var==val, operant
  \{
    if ( defined var\#@@type )
      display '[asm:op:string] variable »', \`var, '« already defined!', 10
      err
    else
      ;display 'add »', \`var, '«', 10
    end if
    done                                equ                                     true
    virtual                             at null
      db                                val
      match any, rest
      \\{
        db                              rest
      \\}
      size                              =                                       ( $ )
    end virtual
    match , rest
    \\{
      addList                           op@@strlst,                             < buffer db ( size and 0xff ), (( size shr 8 ) and 0xff ), val >
    \\}
    match any, rest
    \\{
      addList                           op@@strlst,                             < buffer db ( size and 0xff ), (( size shr 8 ) and 0xff ), val, rest >
    \\}
    pointer var\#@@pointer = ( buffer + 2 - __init__ )
    var\#@@type                         equ                                     op@@tBuffer
    var\#@@size                         =                                       size
    var\#@@value                        =                                       var\#@@pointer@@value

    displayValue '*string = 0x', ( buffer + 2 - __init__ + __init__ * 1 )
    displayValue 'string  = 0x', var\#@@pointer@@value
 ;   var@@d_pointer_ptr                  =                                       ( var@@d_pointer_ptr + __qword__ )
    ;var@@d_pointer_ptr                  =                                       ( var@@d_pointer_ptr + __dword__ )
;    var@@d_string_ptr                   =                                       ( var@@d_string_ptr + 2 + size )
  \}
  match , done
  \{
    if ( defined operant\#@@type )
      display '[asm:op:string] variable »', \`operant, '« already defined!', 10
      err
    else
      display 'add »', \`operant, '«', 10
    end if
    pointer var\#@@pointer
;    qword operant\#@@pointer
  \}
}
